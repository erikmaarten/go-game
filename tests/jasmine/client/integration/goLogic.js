describe('Go logic', function() {
  describe('Get group', function() {
    it('should include all stones in group', function() {
      var board = "1111000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var inGroup = Game.getGroup(board, [0,1]);
      var expected = [ 0, 1, 2, 3, 22];
      expect(_.difference(expected, inGroup).length).toEqual(0);
      expect(inGroup.length).toEqual(expected.length);
    });

    it('should count all empty intersections that are contained by other stones', function() {
      var board = "0001000000000000000001100000000000000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var inGroup = Game.getGroup(board, [0,1]);
      expect(inGroup.length).toEqual(5);
    });

    it('should include all intersections if the board is empty', function() {
      var board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var inGroup = Game.getGroup(board, [0,1]);
      var boardWidth = Game.getBoardWidth(board);
      expect(inGroup.length).toEqual(boardWidth*boardWidth);
    });

  });

  describe('Get number of liberties for a group', function() {
    it('should properly count all liberties for group of black stones', function() {
      var board = "0001000000000000000001100000000000000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      expect(Game.numberOfLiberties(board, [0, 3])).toEqual(9);
    });

    it('should properly count all liberties for group of white stones', function() {
      var board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000220000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      expect(Game.numberOfLiberties(board, [5, 5])).toEqual(7);
    });

    it('should properly count all liberties when there is a mix of black and white stones', 
      function() {
      var board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000020100000000000000000221000000000000000012000000000000000001020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      expect(Game.numberOfLiberties(board, [5, 5])).toEqual(4);
      expect(Game.numberOfLiberties(board, [6, 5])).toEqual(4);
    });
  });

  describe('Capture stones', function() {
    it('should capture a corner stone that is surrounded', function() {
      var boardAfterPlay = "1200000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var expectedBoardAfterCapture = "0200000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      expect(Game.capture(boardAfterPlay, [1, 0])).toEqual(expectedBoardAfterCapture);
    });

    it('should capture a group that has no liberties', function() {
      var boardAfterPlay = "0211120000000000000002120000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var expectedBoardAfterCapture = "0200020000000000000002020000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      expect(Game.capture(boardAfterPlay, [0, 1])).toEqual(expectedBoardAfterCapture);
    });
  });

  describe('Get adjacent positions', function() {
    it('should not return positions that cross horizontal board boundaries', function() {
      var pos = 18;
      var boardWidth = 19;
      var adj = Game.getAdjacentPositions(pos, boardWidth);
      var expected = [17, 37];
      expect(adj[0]).toEqual(expected[0]);
      expect(adj[1]).toEqual(expected[1]);
      expect(adj.length).toEqual(expected.length);

      pos = 37;
      adj = Game.getAdjacentPositions(pos, boardWidth);
      expected = [36, 56, 18];
      expect(adj[0]).toEqual(expected[0]);
      expect(adj[1]).toEqual(expected[1]);
      expect(adj[2]).toEqual(expected[2]);
      expect(adj.length).toEqual(expected.length);
    });
  });

  describe('Get empty groups for the whole board', function() {
    it('should return correct number of groups', function() {
      var board = "001000200011000200110000222000000000000000000000000000000000000000000000000000000";
      var emptyGroups = Game.getEmptyGroups(board);
      expect(emptyGroups.length).toEqual(3);
    });

    it('should return groups that have appropriate member intersections', function() {
      var board = "001000200011000200110000222000000000000000000000000000000000000000000000000000000";
      var emptyGroups = Game.getEmptyGroups(board);
      // sort by number of elements
      emptyGroups.sort(function(groupA, groupB) {
        if (groupA.length < groupB.length) return -1;
        else if (groupA.length > groupB.length) return 1;
        else return 0;
      });
      expect(emptyGroups.length).toEqual(3);
      expect(emptyGroups[0].length).toEqual(3);
      expect(emptyGroups[1].length).toEqual(4);
      expect(emptyGroups[2].length).toEqual(64);
    });

  });

  describe('Test scoring', function() {
    it('should correctly count the territory and stones when a small corner territory is controlled', function() {
      var board = "001000200011000200110000222000000000000000000000000000000000000000000000000000000";
      var scores = Game.getFinalScore(board);
      var blackExpected = 8;
      var whiteExpected = 9;
      expect(scores.black).toEqual(blackExpected);
      expect(scores.white).toEqual(whiteExpected);
    });

    it('should correctly ignore a region that is connected to both black and white stones', 
      function() {
      var board = "000000000200100000201010000001001000001021000200110000202020000020000000000000200";
      var scores = Game.getFinalScore(board);
      var blackExpected = 9;
      var whiteExpected = 9;
      expect(scores.black).toEqual(blackExpected);
      expect(scores.white).toEqual(whiteExpected);
    });

  });

  describe('Recreate board positions', function() {
    it('should correctly return three boards when given a three-move history', function() {
      var board1 = "001000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var board2 = "021000000000000000000000000000000000000000000000000000000000000000000000000000000";
      var board3 = "021100000000000000000000000000000000000000000000000000000000000000000000000000000";
      var history = [
        {type: "placeStone", color: "black", position: 2},
        {type: "placeStone", color: "white", position: 1},
        {type: "placeStone", color: "black", position: 3},
      ];
      var boards = Game.recreateBoardPositions(history, Game.getBoardWidth(board1));
      expect(boards.indexOf(board1)).toEqual(0);
      expect(boards.indexOf(board2)).toEqual(1);
      expect(boards.indexOf(board3)).toEqual(2);
    });


  });
});